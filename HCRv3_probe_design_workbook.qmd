---
title: "HCR probe design"
format: html
editor_options: 
  chunk_output_type: console
---

## Update

Modified: 2022.09.20

## Environment

Requires installation of blastn using conda (see README.md).

```{r}
## ---- R packages 
library(tidyverse) 
library(furrr) 
library(patchwork) 
library(valr) 
library(Biostrings) # Bioconductor
library(rBLAST) # Github

## ---- Load functions
source("./src/HCR_design.R")

## ---- Add BLAST installation to PATH
## The PATH edit only temporarily applies to this QMD, so this code should be run each session.
conda_blast_bin <- "/opt/miniconda3/envs/BLAST/bin" # find this directory
Sys.setenv(PATH = paste(Sys.getenv("PATH"), conda_blast_bin, sep = .Platform$path.sep))
Sys.getenv("PATH")
Sys.which("blastn")

## ---- Set up multi-threading to speed up some calculation
n_threads <- 4
plan(multisession, workers = n_threads) 

```


## Prepare tiled candidate probes from the target RNA sequence 

This chunk will take a FASTA file as input. To prevent probe design across exon-intron junctions do either of the following:

  (1) Put character N between exons in case of one single fasta entry; or
  (2) Set each exon as separate fasta entry in a single fasta file. 
  
Alternatively, assign target sequence (character class) to 'target_raw'. 

```{r}
<<<<<<< HEAD
## ---- Input FASTA and name
fasta_file <- "./input/Dmel_cip4-exon.fa" 
target_name <- "cip4-exon"
=======
## ---- Get target RNA sequence
fasta_file <- "./input/Dmel_lac-exon.fa" 
>>>>>>> a0752cfa84579b288961ebf114eead3ffea502d6

## ---- Get target RNA sequence
target_fasta <- readDNAStringSet(fasta_file)
target_raw <- paste(target_fasta, collapse = "N")

## ---- Prepare target RNA sequence
target <- clean_pasted_seq(target_raw)
target_sequence_total_length <- nchar(target)

## ---- Extract candidate probes into a dataframe
<<<<<<< HEAD
candidate_probes <- generate_candidate_probes(target_seq   = target,
                                              oligo_length = 52)
=======
target_name <- "lac-exon"
oligo_length <- 52

candidate_probes <- generate_candidate_probes(target_seq   = target,
                                              oligo_length = oligo_length)

>>>>>>> a0752cfa84579b288961ebf114eead3ffea502d6
## ---- Inspect
inspect_probe_prep(candidate_probes)

```


## Calculate thermodynamic and sequence composition parameters for candidate probes 

TODO: add hairpin_dG, homodimer_dG calculations as in MK's ribopop design?

```{r}
## ---- Set the hybridisation condition
temperature <- 37
Na <- 0.3
oligo_conc <- 5e-5

## ---- Get thermodynamic parameters
thermodynamics <- get_thermodynamic_parameters(candidate_probes, temperature, Na, oligo_conc)

## ---- Annotate candidate sequences 
candidate_probes_annotated <- annotate_probes(candidate_probes, thermodynamics)

```

## Filter based on thermodynamics / base composition parameters 

- Raj lab HCR (52nt)
 - dG [-70, -50] https://journals.asm.org/doi/10.1128/mbio.03751-21 
- Sakura-Spengler lab (25nt) 
 - GC [37, 85]
 - Tm [55, 77]
- Oligostan 26-32nt
 - dG -32
 - GC [40, 60]
 - Nucleotide composition rules

```{r}
## ---- Generate exploratory plots
c("Tm", "dG", "GC_content") %>% generate_exploratory_plots()

```

```{r}
## ---- Set filtering parameters
target_dG <- -60
target_dG_halves <- -32
dG_range <- c(-75, -50)
Tm_range <- c(10, 100)
GC_range <- c(0.4, 0.7)
pass_a_comp       <- FALSE
pass_c_comp       <- FALSE
pass_a_stack      <- TRUE
pass_c_stack      <- TRUE
pass_c_spec_stack <- TRUE

## ---- Filter based on thermodynamic/nucleotide compositions
candidate_probes_filtered <- filter_candidate_probes(candidate_probes_annotated)

## ---- Inspect filtered probes
plot_inspection(candidate_probes_filtered, "Tm")

```


## BLAST screen

BLAST screen with short blastn mode.
RMBLAST or Bowtie1? Instead of bowtie2?

```{r}
## ---- Set params
blast_file <- "~/Documents/BLAST/Dmel/Dmel_ens99_from-MK.fa"
tx2gene_csv <- "./data/Dmel_tx2gene_ENSEMBL_v99.csv" # To convert tx_id to gene_id
<<<<<<< HEAD
max_blast_matches <- 1 # Max number of BLAST hits
=======
max_blast_matches <- 1 # Number of BLAST hits
>>>>>>> a0752cfa84579b288961ebf114eead3ffea502d6
allowOverlapBreakRegion <- TRUE # Allow overlap over the 25/25 break region?

## ---- Set up blast environment
db <- blast(db = blast_file)

## ---- Get sequences of filtered candidate target_sequence 
seqs <- DNAStringSet(candidate_probes_filtered$target_sequence)
names(seqs) <- candidate_probes_filtered$unique_id

## ---- BLAST nucleotide
blast_output <- run_blastn_short(db, seqs, tx2gene_csv)
blast_summary <- summarise_blast_output(blast_output, allowOverlapBreakRegion)

## ---- Screen candidate probes
blast_screened <- screen_with_blast_summary(candidate_probes_filtered, max_blast_matches, blast_summary)
candidate_probes_screened <- blast_screened[[1]]
merge_df <- blast_screened[[2]]

## ---- Inspect BLAST screened probes
plot_inspection(candidate_probes_screened, "Tm") +
  geom_linerange(data = merge_df, 
      aes(x = "", ymin = start, ymax = end),
      colour = "gray40", size = 2,
      inherit.aes = FALSE)

```

## Distribute and select probes

```{r}
## ---- Set params
probe_spacing <- 3

## ---- Get final non-overlapping screened candidate probes 
candidate_probes_final <- distribute_overlapping_probes(candidate_probes_screened, merge_df, probe_spacing)

## ---- Inspect
plot_inspection(candidate_probes_final, "Tm") +
  geom_linerange(data = merge_df, 
      aes(x = "", ymin = start, ymax = end),
      colour = "gray40", size = 2,
      inherit.aes = FALSE)

```

## Attach HCR-B initiator sequences 

Attach HCR B1/B2/B3/B4/B5 split initiator sequences to selected probe sequences (rev-com'ed)
 - Initiator b is added 3' end of First half (5') sequence
 - Initiator a is added 5' end of Second half (3') sequence

```{r}
## ---- Choose hairpin for multiplexing
b_identifier <- "B1"

## ---- Attach hairpin sequences and save 
probe_details <- attach_hcr_initiatior(candidate_probes_final, b_identifier = b_identifier)
probes <- get_final_probe_sequences(probe_details)

```

## Save probe sequences and some other outputs

```{r}
## ---- Create output directory
output_dir <- paste0("./output/", target_name, "_", "HCR", b_identifier, "/")
if(!dir.exists(output_dir)){dir.create(output_dir)}

## ---- Export outputs 
export_outputs(output_dir, probe_details, probes, blast_output)

## ---- A plot showing plot distribution along target RNA sequence
plot_final_probes(probe_details, "Tm")
ggsave(paste0(output_dir, target_name, "_", "HCR", b_identifier, "_probes.pdf"), 
       width = 7, height = 4)
  
```























/usr/people/bioc1402/data/computational_projects/C2/2.25.fishprobe_design/dmel_200729/offtarget_filtering/Dmel
[16:15] Mary Thompson
/usr/people/bioc1402/miniconda3/envs/ribopop_probe_design























































