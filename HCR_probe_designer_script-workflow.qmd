---
title: "HCR probe design"
format: html
output-file: output/output.pdf
editor_options: 
  chunk_output_type: console
---

## Update

Modified: 2024.01.06

## Environment

Requires installation of blastn (see README.md).

```{r}
## ---- R packages 
library(tidyverse) 
library(Rcpp)
library(patchwork) 
library(valr) 
library(Biostrings) # Bioconductor
library(metablastr) # Github

## ---- Load functions
source("./src/HCR_design.R")
Sys.which("blastn") # check R can find the BLAST installation

## ---- Set up multi-threading to speed up BLAST
n_threads <- 4
# plan(multisession, workers = n_threads) 

```


## Prepare tiled candidate probes from the target RNA sequence 

This chunk will take a FASTA file as input. To prevent probe design across exon-intron junctions do either of the following:

  (1) Put character N between exons in case of one single fasta entry; or
  (2) Set each exon as separate fasta entries in a single fasta file. 
  
Alternatively, assign target sequence (character class) to 'target_raw'. 

```{r}
## ---- Input FASTA and name
fasta_file <- "./input/Dmel_cip4-exon.fa" 
target_name <- "cip4-exon"

## ---- Get target RNA sequence
target_fasta <- readBStringSet(fasta_file)
target_raw <- paste(target_fasta, collapse = "N")

## ---- Prepare target RNA sequence
target <- clean_pasted_seq(target_raw)
target_sequence_total_length <- nchar(target)

## ---- Extract candidate probes into a dataframe
candidate_probes <- generate_candidate_probes(target_seq   = target,
                                              oligo_length = 52)
## ---- Inspect
inspect_probe_prep(candidate_probes, target, target_name)


```


## Calculate thermodynamic and sequence composition parameters for candidate probes 

```{r}
## ---- Set the hybridisation condition
temperature <- 37
Na <- 0.3
oligo_conc <- 5e-5

## ---- Get thermodynamic parameters
thermodynamics <- get_thermodynamic_parameters(candidate_probes, temperature, Na, oligo_conc)

## ---- Annotate candidate sequences 
candidate_probes_annotated <- annotate_probes(candidate_probes, thermodynamics)

## ---- Generate exploratory plots
generate_exploratory_plots(
  candidate_probes_annotated, 
  c("Tm", "dG", "GC_content")
)

```

## Filter based on thermodynamics / base composition parameters 

Default parameters: 
target_dG <- -80
target_dG_halves <- -38
dG_range <- c(-100, -60)
Tm_range <- c(60, 90)
GC_range <- c(0.4, 0.6)
pass_a_comp       <- TRUE
pass_c_comp       <- FALSE
pass_a_stack      <- TRUE
pass_c_stack      <- TRUE
pass_c_spec_stack <- FALSE

```{r}
## ---- Set filtering parameters
target_dG <- -80
target_dG_halves <- -38
dG_range <- c(-100, -60)
Tm_range <- c(60, 90)
GC_range <- c(0.4, 0.6)
pass_a_comp       <- TRUE
pass_c_comp       <- FALSE # stringent one
pass_a_stack      <- TRUE
pass_c_stack      <- TRUE
pass_c_spec_stack <- FALSE # stringent one

## ---- Filter based on thermodynamic/nucleotide compositions
candidate_probes_filtered <- filter_candidate_probes(candidate_probes_annotated)

## ---- Inspect filtered probes
plot_inspection(candidate_probes_filtered, candidate_probes, "Tm", target_name)

```


## BLAST screen

BLAST screen with short blastn mode. (evalue cutoff 0.1 default?)
RMBLAST or Bowtie1? Instead of bowtie2?

```{r}
## ---- Set params
blast_file <- "./data/BLAST/Dmel_BLASTdb_ens99.fa"
tx2gene_csv <- "./data/BLAST/tx2gene/Dmel_tx2gene_ENSEMBL_v99.csv" # To convert tx_id to gene_id
evalue_cutoff <- 0.1 # smaller the value the more lenient
allowOverlapBreakRegion <- TRUE # Allow overlap over the 25/25 break region?

## ---- BLAST nucleotide (this bit takes time)
blast_output <- run_blastn(df = candidate_probes_filtered, db = blast_file, tx2gene = tx2gene_csv, task = "blastn")

## ---- Choose BLAST threshold
max_blast_matches <- 1 # Max number of BLAST hits
consider_pseudogene <- FALSE # are you considering pseudogenes?

blast_summary <- summarise_blast_output(blast_output, allowOverlapBreakRegion, evalue_cutoff = evalue_cutoff, consider_pseudogene)

ggplot(blast_summary, aes(n_matches)) + geom_histogram(binwidth = 1)

## ---- Screen and inspect candidate probes
blast_screened <- screen_with_blast_summary(candidate_probes_filtered, max_blast_matches, blast_summary)
candidate_probes_screened <- blast_screened[[1]]
merge_df <- blast_screened[[2]]

plot_inspection(candidate_probes_screened, candidate_probes, "Tm", target_name) +
  geom_linerange(data = merge_df, 
      aes(x = "", ymin = start, ymax = end),
      colour = "gray40", size = 2,
      inherit.aes = FALSE)

```

## Distribute and select probes

```{r}
## ---- Set params
probe_spacing <- 3
max_probe_pairs <- 33 # 33 is max pair count for IDT oPools cheap configuration

## ---- Get final non-overlapping screened candidate probes 
# candidate_probes_final <- distribute_overlapping_probes(candidate_probes_screened, merge_df, probe_spacing)
candidate_probes_final <- distribute_overlapping_probes_cpp(candidate_probes_screened, merge_df, probe_spacing)

# benchmark_result <- microbenchmark::microbenchmark(
#   R_function = distribute_overlapping_probes(candidate_probes_screened, merge_df, probe_spacing),
#   Cpp_function = distribute_overlapping_probes_cpp(candidate_probes_screened, merge_df, probe_spacing)
# )
# autoplot(benchmark_result)
# waldo::compare(candidate_probes_final, candidate_probes_final_cpp)

candidate_probes_final <- cull_excess_pairs(candidate_probes_final, max_probe_pairs)

## ---- Inspect
plot_inspection(candidate_probes_final, candidate_probes, "Tm", target_name) +
  geom_linerange(data = merge_df, 
      aes(x = "", ymin = start, ymax = end),
      colour = "gray40", size = 2,
      inherit.aes = FALSE) + 
  labs(subtitle = paste0(nrow(candidate_probes_final)," Non-overlapping probes")) + 
  theme_bw()

```

## Attach HCR-B initiator sequences 

Attach HCR B1/B2/B3/B4/B5 split initiator sequences to selected probe sequences (rev-com'ed)
 - Initiator b is added 3' end of First half (5') sequence
 - Initiator a is added 5' end of Second half (3') sequence

```{r}
## ---- Choose hairpin for multiplexing
b_identifier <- "B1"

## ---- Attach hairpin sequences and save 
probe_details <- attach_hcr_initiatior(candidate_probes_final, b_identifier = b_identifier, target_name = target_name)
probes <- get_final_probe_sequences(probe_details)

```

## Save probe sequences and some other outputs

```{r}
## ---- Create output directory
output_dir <- paste0("./output/", Sys.Date(), "_", target_name, "_", "HCR", b_identifier, "/")
if(!dir.exists(output_dir)){dir.create(output_dir)}

## ---- Export outputs 
export_outputs(output_dir, probe_details, probes, blast_output)

## ---- A plot showing plot distribution along target RNA sequence
plot_final_probes(probe_details, candidate_probes, "Tm", target_name) +
  geom_hline(yintercept = as_tibble(str_locate_all(target, pattern = "N")[[1]]) %>% pull(start),
               colour = "gray80")
ggsave(paste0(output_dir, target_name, "_", "HCR", b_identifier, "_probes.pdf"), 
       width = 7, height = 4)
  
```














































































